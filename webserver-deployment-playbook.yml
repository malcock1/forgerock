---

#
# This play will deploy a the webserver application into 
# Kubernetes. So that it will be accessable on port 80.
#
- hosts: localhost
  become: no
  vars:
    deployment_state: present
    namespace: default
    symbol: "MSFT"
    ndays: 7
    apikey: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          39656432313364313464623833333665663532663861356339663935363235333034373466363930
          3939646630353237366366313433363638366133323962370a343131343031303637313431356431
          36353934643539343465323237333932653830623966313834396235616163363065623938333235
          6530623532326463620a343738373863336535366464633062613061363865363761346266363234
          33306433333064653238303635633366646233343536366333643263326339313363

  tasks:   
  - name: "Ensure namespace {{ namespace }} is {{ deployment_state }}"
    k8s:
      state: "{{ deployment_state }}"
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: "{{ namespace }}"
    when: namespace != "default"

  - name: "Ensure the ConfigMap is deployment is {{ deployment_state }}"
    k8s:
      state: "{{ deployment_state }}"
      definition:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: webserver-config
          namespace: "{{ namespace }}"
        data:
          SYMBOL: "{{ symbol }}"
          NDAYS: "{{ ndays|int }}"

  - name: "Ensure the Secret is deployment is {{ deployment_state }}"
    k8s:
      state: "{{ deployment_state }}"
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: webserver-secret
          namespace: "{{ namespace }}"
        type: Opaque
        data:
          APIKEY: "{{ apikey }}"

  - name: "Ensure the app is deployment is {{ deployment_state }}"
    k8s:
      state: "{{ deployment_state }}"
      definition:
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          labels:
            app: webserver
          name: webserver
          namespace: "{{ namespace }}"
        spec:
          progressDeadlineSeconds: 600
          replicas: 1
          revisionHistoryLimit: 10
          selector:
            matchLabels:
              app: webserver
          strategy:
            rollingUpdate:
              maxSurge: 25%
              maxUnavailable: 25%
            type: RollingUpdate
          template:
            metadata:
              creationTimestamp: null
              labels:
                app: webserver
            spec:
              containers:
              - image: malcock/webserver:latest
                imagePullPolicy: Always
                name: webserver
                resources: {}
                terminationMessagePath: /dev/termination-log
                terminationMessagePolicy: File
                env:
                - name: APIKEY
                  valueFrom:
                    secretKeyRef:
                      name: webserver-secret
                      key: APIKEY
                - name: SYMBOL
                  valueFrom:
                    configMapKeyRef:
                      name: webserver-config
                      key: SYMBOL
                - name: NDAYS
                  valueFrom:
                    configMapKeyRef:
                      name: webserver-config
                      key: NDAYS
              dnsPolicy: ClusterFirst
              restartPolicy: Always
              schedulerName: default-scheduler
              securityContext: {}
              terminationGracePeriodSeconds: 30

  - name: "Ensure the app service is deployment is {{ deployment_state }}"
    k8s:
      state: "{{ deployment_state }}"
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: webserver
          namespace: "{{ namespace }}"
        spec:
          selector:
            app: webserver
          ports:
            - protocol: TCP
              port: 80
              targetPort: 8000

  - name: "Ensure the app ingress is deployment is {{ deployment_state }}"
    k8s:
      state: "{{ deployment_state }}"
      definition:
        apiVersion: networking.k8s.io/v1beta1
        kind: Ingress
        metadata:
          name: webserver
          namespace: "{{ namespace }}"
        spec:
          backend:
            serviceName: webserver
            servicePort: 80

  - name: Get the ingress IP address (wait until the ingress address is assigned)
    k8s_facts:
      api_version: networking.k8s.io/v1beta1
      kind: Ingress
      name: webserver
      namespace: "{{ namespace }}"
    register: webserver_ingress
    until: webserver_ingress.resources[0].status.loadBalancer.ingress[0].ip is defined
    retries: 12
    delay: 10
    when: deployment_state == "present"

  - name: Application access url
    debug: msg="Application URL http://{{ webserver_ingress.resources[0].status.loadBalancer.ingress[0].ip }}"
    when: deployment_state == "present"

  - name: Test access to the Application
    uri:
      url: "http://{{ webserver_ingress.resources[0].status.loadBalancer.ingress[0].ip }}"
      return_content: yes
    register: page
    failed_when: "'ERROR' in page.content"
    when: deployment_state == "present"

  - name: Test results
    debug: msg="{{ page.content }}"
    when: deployment_state == "present"